(define (kombiniere op)
	(define (get_val input)
		(if (null? input) 0 (car input))
	)
	(define (next input)
		(if (null? input) (list) (cdr input))
	)
	(define (helper func in1 in2 out)
		(if (and (null? in1) (null? in2)) out
			(let*
				(
					(val1 (get_val in1))
					(val2 (get_val in2))
					(in1 (next in1))
					(in2 (next in2))
					(out_val (func val1 val2))
					(out (append out (list out_val)))
				)
				(helper op in1 in2 out)
			)
		)
	  )
	  (lambda (in1 in2)
		(helper op in1 in2 '())
	)
)

(define (op a b) (+ a b))
(define func (kombiniere op))
(func '(1 2 3 1 2 3) '(3 4 5))
